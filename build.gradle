import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'org.liquibase.gradle' version '2.0.4'
}

group = 'com.jlisok'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

repositories {
    mavenCentral()
    jcenter()
}

ext {
    auth0Version = '3.4.0'
    hibernateVersion = '5.4.18.Final'
    javaxPersistenceVersion = '2.2'
    javaxValidationVersion = '2.0.1.Final'
    liquibaseVersion = '3.10.2'
    logbackVersion = '1.2.3'
    mockitoVersion = '3.5.7'
    postgresVersion = '42.2.16'
    springStarterVersion = '2.3.2.RELEASE'
    surefireVersion = '3.0.0-M5'
    apacheCommonsVersion = '3.11'
    jaxbVersion = '2.3.1'
    googleApiVersion = '1.30.10'
    youtubeApiVersion = 'v3-rev222-1.25.0'
    hibernateTypesVersion = '2.9.13'
}


dependencies {
    developmentOnly group: 'org.springframework.boot', name: 'spring-boot-devtools', version: "${springStarterVersion}"

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springStarterVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: "${springStarterVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springStarterVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springStarterVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation group: 'com.auth0', name: 'java-jwt', version: "${auth0Version}"

    implementation group: 'org.postgresql', name: 'postgresql', version: "${postgresVersion}"


    implementation group: 'org.hibernate', name: 'hibernate-core', version: "${hibernateVersion}"
    implementation group: 'org.hibernate', name: 'hibernate-entitymanager', version: "${hibernateVersion}"

    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: "${hibernateTypesVersion}"

    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: "${javaxPersistenceVersion}"

    implementation group: 'javax.validation', name: 'validation-api', version: "${javaxValidationVersion}"

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommonsVersion}"


    // Google authentication
    implementation group: 'com.google.api-client', name: 'google-api-client', version: "${googleApiVersion}"
    implementation group: 'com.google.apis', name: 'google-api-services-youtube', version: "${youtubeApiVersion}"

    //
    // To run mockito with junit5
    //
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"


    //
    // Liquibase plugin
    //
    liquibaseRuntime group: 'org.liquibase', name: 'liquibase-core', version: "${liquibaseVersion}"
    liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: "${jaxbVersion}"
    liquibaseRuntime group: 'ch.qos.logback', name: 'logback-core', version: "${logbackVersion}"
    liquibaseRuntime group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
    liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: "${postgresVersion}"
}

bootRun {
    if (Files.exists(Paths.get('.environment.local'))) {
        file('.environment.local').readLines().each() {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def pos = it.indexOf("=")
                def key = it.substring(0, pos)
                def value = it.substring(pos + 1)
                if (System.getenv(key) == null) {
                    environment(key, value)
                }
            }
        }
    }
    file('.environment.shared').readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
            def pos = it.indexOf("=")
            def key = it.substring(0, pos)
            def value = it.substring(pos + 1)
            if (System.getenv(key) == null) {
                environment(key, value)
            }
        }
    }
}

test {
    Map<String, String> environmentVariablesToSet = new HashMap<>();
    File envFile = file('.environment.local')
    if (envFile.exists()) {
        envFile.readLines().each {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def pos = it.indexOf("=")
                def key = it.substring(0, pos)
                def value = it.substring(pos + 1)
                if (System.getenv(key) == null) {
                    environmentVariablesToSet.put(key, value);
                }
            }
        }
    }
    file('.environment.shared').readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
            def pos = it.indexOf("=")
            def key = it.substring(0, pos)
            def value = it.substring(pos + 1)
            if (System.getenv(key) == null && !environmentVariablesToSet.containsKey(key)) {
                environmentVariablesToSet.put(key, value);
            }
        }
    }
    environment(environmentVariablesToSet)
    useJUnitPlatform()

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

liquibase {
    Map<String, String> environmentVariablesToSet = new HashMap<>();

    System.getenv().each() { key, value ->
        environmentVariablesToSet.put(key, value);
    }

    File envFile = file('.environment.local')
    if (envFile.exists()) {
        envFile.readLines().each {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def pos = it.indexOf("=")
                def key = it.substring(0, pos)
                def value = it.substring(pos + 1)
                if (System.getenv(key) == null) {
                    environmentVariablesToSet.put(key, value);
                }
            }
        }
    }
    file('.environment.shared').readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
            def pos = it.indexOf("=")
            def key = it.substring(0, pos)
            def value = it.substring(pos + 1)
            if (System.getenv(key) == null && !environmentVariablesToSet.containsKey(key)) {
                environmentVariablesToSet.put(key, value);
            }
        }
    }
    environmentVariablesToSet.forEach() { key, value ->
        System.setProperty(key, value)
    }

    def dbHost = System.getProperty("DB_HOST")
    def dbPort = System.getProperty("DB_PORT")
    def dbName = System.getProperty("DB_NAME")
    def dbUsername = System.getProperty("DB_USERNAME")
    def dbPassword = System.getProperty("DB_PASSWORD")

    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
            url "jdbc:postgresql://$dbHost:$dbPort/$dbName"
            username "$dbUsername"
            password "$dbPassword"
        }
    }
    runList = 'main'
}